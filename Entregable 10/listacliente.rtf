{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Arial;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red160\green160\blue160;\red190\green190\blue230;\red128\green128\blue255;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs24 \cb3\cf13 #ifndef LISTACLIENTE_H_INCLUDED
\par #define LISTACLIENTE_H_INCLUDED
\par 
\par #include <string>
\par 
\par #include "nodocliente.h"
\par #include "cliente.h"
\par #include "listexception.h"
\par 
\par 
\par \cb3\cf11\b class \b0\cb1\cf0 ListaCliente\cb3\cf22 \{
\par \cb3\cf11\b private\b0\cb3\cf22 :
\par     \cb1\cf0 NodoCliente\cb3\cf22 * \cb1\cf0 ultimo\cb3\cf22 ;
\par     \cb1\cf0 NodoCliente\cb3\cf22 * \cb1\cf0 primerInsertado\cb3\cf22 ;
\par     \cb1\cf0 NodoCliente\cb3\cf22 * \cb1\cf0 auxiliar\cb3\cf22 ;
\par     \cb1\cf0 NodoCliente\cb3\cf22 * \cb1\cf0 auxiliar2\cb3\cf22 ;
\par 
\par     \cb3\cf11\b void \b0\cb1\cf0 intercambiar\cb3\cf22 (\cb1\cf0 NodoCliente\cb3\cf22 *,\cb1\cf0 NodoCliente\cb3\cf22 *);
\par     \cb3\cf11\b void \b0\cb1\cf0 copiarTodo\cb3\cf22 (\cb3\cf11\b const \b0\cb1\cf0 ListaCliente\cb3\cf22 &);
\par \cb3\cf11\b public\b0\cb3\cf22 :
\par     \cb1\cf0 ListaCliente\cb3\cf22 ();
\par     \cb1\cf0 ListaCliente\cb3\cf22 (\cb3\cf11\b const \b0\cb1\cf0 ListaCliente\cb3\cf22 &);
\par 
\par     \cb3\cf11\b bool \b0\cb1\cf0 isEmpty\cb3\cf22 ();
\par     \cb3\cf11\b void \b0\cb1\cf0 insertar\cb3\cf22 (\cb3\cf11\b const \b0\cb1\cf0 Cliente\cb3\cf22 &);
\par     \cb3\cf11\b void \b0\cb1\cf0 eleminar\cb3\cf22 (\cb3\cf11\b const \b0\cb1\cf0 Cliente\cb3\cf22 &);
\par     \cb1\cf0 NodoCliente\cb3\cf22 * \cb1\cf0 primerNodo\cb3\cf22 ();
\par     \cb1\cf0 NodoCliente\cb3\cf22 * \cb1\cf0 ultimoNodo\cb3\cf22 ();
\par     \cb1\cf0 NodoCliente\cb3\cf22 * \cb1\cf0 anterior\cb3\cf22 (\cb1\cf0 NodoCliente\cb3\cf22 *);
\par     \cb1\cf0 NodoCliente\cb3\cf22 * \cb1\cf0 siguiente\cb3\cf22 (\cb1\cf0 NodoCliente\cb3\cf22 *);
\par     \cb1\cf0 NodoCliente\cb3\cf22 * \cb1\cf0 localiza\cb3\cf22 (\cb3\cf11\b const \b0\cb1\cf0 Cliente\cb3\cf22 &);
\par     \cb3\cf11\b void \b0\cb1\cf0 ordena\cb3\cf22 ();
\par     \cb3\cf11\b void \b0\cb1\cf0 ordena\cb3\cf22 (\cb1\cf0 NodoCliente\cb3\cf22 *,\cb1\cf0 NodoCliente\cb3\cf22 *);
\par     \cb3\cf13\b std\b0\cb3\cf22 ::\cb3\cf13\b string \b0\cb1\cf0 recupera\cb3\cf22 (\cb3\cf11\b const \b0\cb1\cf0 Cliente\cb3\cf22 &);
\par     \cb3\cf13\b std\b0\cb3\cf22 ::\cb3\cf13\b string \b0\cb1\cf0 toString\cb3\cf22 ();
\par     \cb3\cf11\b void \b0\cb1\cf0 eliminarTodo\cb3\cf22 ();
\par 
\par     \cb1\cf0 ListaCliente\cb3\cf22 & \cb3\cf11\b operator \b0\cb3\cf22 = (\cb3\cf11\b const \b0\cb1\cf0 ListaCliente\cb3\cf22 &);
\par \};
\par 
\par \cb3\cf13 #endif \cb3\cf5 // LISTACLIENTE_H_INCLUDED
\par }