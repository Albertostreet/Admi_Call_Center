{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Segoe UI;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red160\green160\blue160;\red190\green190\blue230;\red128\green128\blue255;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20 \cb3\cf13 #include "listaagentes.h"
\par 
\par \cb3\cf11\b using namespace \b0\cb3\cf13\b std\b0\cb3\cf22 ;
\par 
\par \cb3\cf11\b void \b0\cb1\cf0 ListaAgentes\cb3\cf22 ::\cb1\cf0 Intercambiar\cb3\cf22 (\cb1\cf0 NodoAgente\cb3\cf22 *\cb1\cf0 a\cb3\cf22 , \cb1\cf0 NodoAgente\cb3\cf22 *\cb1\cf0 b\cb3\cf22 )
\par \{
\par     \cb1\cf0 Agente aux\cb3\cf22 (\cb1\cf0 a\cb3\cf22 ->\cb1\cf0 getAgente\cb3\cf22 ());
\par     \cb1\cf0 a\cb3\cf22 ->\cb1\cf0 setAgente\cb3\cf22 (\cb1\cf0 b\cb3\cf22 ->\cb1\cf0 getAgente\cb3\cf22 ());
\par     \cb1\cf0 b\cb3\cf22 ->\cb1\cf0 setAgente\cb3\cf22 (\cb1\cf0 aux\cb3\cf22 );
\par \}
\par 
\par \cb1\cf0 ListaAgentes\cb3\cf22 ::\cb1\cf0 ListaAgentes\cb3\cf22 () : \cb1\cf0 ultimoInsertado\cb3\cf22 (\cb3\cf11\b nullptr\b0\cb3\cf22 ), \cb1\cf0 primerInsertado\cb3\cf22 (\cb3\cf11\b nullptr\b0\cb3\cf22 ), \cb1\cf0 auxiliar1\cb3\cf22 (\cb3\cf11\b nullptr\b0\cb3\cf22 ), \cb1\cf0 auxiliar2\cb3\cf22 (\cb3\cf11\b nullptr\b0\cb3\cf22 )
\par \{
\par 
\par \}
\par 
\par \cb3\cf11\b bool \b0\cb1\cf0 ListaAgentes\cb3\cf22 ::\cb1\cf0 isEmpty\cb3\cf22 ()
\par \{
\par     \cb3\cf11\b return \b0\cb1\cf0 ultimoInsertado \cb3\cf22 == \cb3\cf11\b nullptr\b0\cb3\cf22 ;
\par \}
\par 
\par \cb3\cf11\b void \b0\cb1\cf0 ListaAgentes\cb3\cf22 ::\cb1\cf0 insertar\cb3\cf22 (\cb3\cf11\b const \b0\cb1\cf0 Agente\cb3\cf22 &\cb1\cf0 a\cb3\cf22 )
\par \{
\par     \cb1\cf0 NodoAgente\cb3\cf22 * \cb1\cf0 nuevo_nodo \cb3\cf22 = \cb3\cf11\b new \b0\cb1\cf0 NodoAgente\cb3\cf22 ();
\par     \cb3\cf11\b if \b0\cb3\cf22 (\cb1\cf0 primerInsertado \cb3\cf22 == \cb3\cf11\b nullptr\b0\cb3\cf22 ) \{
\par         \cb1\cf0 primerInsertado \cb3\cf22 = \cb1\cf0 nuevo_nodo\cb3\cf22 ;
\par         \cb1\cf0 nuevo_nodo\cb3\cf22 ->\cb1\cf0 setAgente\cb3\cf22 (\cb1\cf0 a\cb3\cf22 );
\par         \cb1\cf0 nuevo_nodo\cb3\cf22 ->\cb1\cf0 setSiguiente\cb3\cf22 (\cb1\cf0 ultimoInsertado\cb3\cf22 );
\par         \cb1\cf0 ultimoInsertado \cb3\cf22 = \cb1\cf0 nuevo_nodo\cb3\cf22 ;
\par     \} \cb3\cf11\b else \b0\cb3\cf22 \{
\par         \cb1\cf0 nuevo_nodo\cb3\cf22 ->\cb1\cf0 setAgente\cb3\cf22 (\cb1\cf0 a\cb3\cf22 );
\par         \cb1\cf0 nuevo_nodo\cb3\cf22 ->\cb1\cf0 setSiguiente\cb3\cf22 (\cb1\cf0 ultimo\cb3\cf22 );
\par         \cb1\cf0 ultimo\cb3\cf22 ->\cb1\cf0 setAnterior\cb3\cf22 (\cb1\cf0 nuevo_nodo\cb3\cf22 );
\par         \cb1\cf0 ultimoInsertado \cb3\cf22 = \cb1\cf0 nuevo_nodo\cb3\cf22 ;
\par     \}
\par 
\par \}
\par }